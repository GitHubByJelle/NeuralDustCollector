"""
Autonomous Robotic Systems Assignment 4
Author: Jelle Jansen
Date: 09-03-2021

Simulation_nn.py

Simulation program that simulates an evolved robot moving
in different rooms using a neural network.

"""


from Simulation.simulation import simulate_auto
from Robot.obstacle import Obstacle
from Robot.robot import Robot
import numpy as np

def simulate_robot_nn(steps = 100):
    # Create environment.
    obstacles1 = [Obstacle([125, 75, 625, 75], 'wall'),
                 Obstacle([625, 75, 625, 345], 'wall'),
                 Obstacle([625, 345, 125, 345], 'wall'),
                 Obstacle([125, 345, 125, 75], 'wall')]
    obstacles2 = [Obstacle([100, 50, 650, 50], 'wall'),
                 Obstacle([650, 50, 650, 370], 'wall'),
                 Obstacle([650, 370, 100, 370], 'wall'),
                 Obstacle([100, 370, 100, 50], 'wall'),
                 Obstacle([180, 130, 570, 130], 'wall'),
                 Obstacle([570, 130, 570, 290], 'wall'),
                 Obstacle([570, 290, 180, 290], 'wall'),
                 Obstacle([180, 290, 180, 130], 'wall')]
    obstacles3 = [Obstacle([100, 50, 650, 100], 'wall'),
                 Obstacle([650, 100, 650, 320], 'wall'),
                 Obstacle([650, 320, 100, 370], 'wall'),
                 Obstacle([100, 370, 100, 50], 'wall'),
                 Obstacle([230, 130, 520, 180], 'wall'),
                 Obstacle([520, 180, 520, 240], 'wall'),
                 Obstacle([520, 240, 230, 290], 'wall'),
                 Obstacle([230, 290, 230, 130], 'wall')]
    obstacles4 = [Obstacle([50, 50, 650, 50], 'wall'),
                 Obstacle([650, 50, 650, 200], 'wall'),
                 Obstacle([650, 200, 400, 200], 'wall'),
                 Obstacle([400, 200, 400, 250], 'wall'),
                 Obstacle([400, 250, 650, 300], 'wall'),
                 Obstacle([650, 300, 650, 370], 'wall'),
                 Obstacle([650, 370, 50, 370], 'wall'),
                 Obstacle([50, 370, 50, 300], 'wall'),
                 Obstacle([50, 370, 50, 300], 'wall'),
                 Obstacle([50, 300, 300, 250], 'wall'),
                 Obstacle([300, 250, 300, 200], 'wall'),
                 Obstacle([300, 200, 50, 200], 'wall'),
                 Obstacle([50, 200, 50, 50], 'wall')]
    obstacles5 = [Obstacle([100, 50, 650, 50], 'wall'),
                 Obstacle([650, 50, 650, 370], 'wall'),
                 Obstacle([650, 370, 100, 370], 'wall'),
                 Obstacle([100, 370, 100, 50], 'wall'),
                 Obstacle([450, 160, 570, 160], 'wall'),
                 Obstacle([570, 160, 570, 240], 'wall'),
                 Obstacle([570, 240, 450, 240], 'wall'),
                 Obstacle([450, 240, 450, 160], 'wall'),
                 Obstacle([100, 80, 120, 80], 'wall'),
                 Obstacle([120, 80, 120, 140], 'wall'),
                 Obstacle([120, 140, 100, 140], 'wall'),
                 Obstacle([100, 140, 100, 80], 'wall'),
                 Obstacle([200, 70, 250, 70], 'wall'),
                 Obstacle([250, 70, 250, 150], 'wall'),
                 Obstacle([250, 150, 200, 150], 'wall'),
                 Obstacle([200, 150, 200, 70], 'wall')]
    obstacles_lst = [obstacles1,obstacles2,obstacles3,obstacles4, obstacles5]
    start_pos = [[200, 200], [610,250], [200,300], [150,125], [610,250]]
    map = 4

    nr_sensors = 12
    offset_sensors = [(2 * np.pi * i0) / nr_sensors for i0 in range(nr_sensors)]
    robot = Robot(start_pos[map], np.pi / 2, 100, 50, 30, offset_sensors, obstacles_lst[map], 0, 0, (750, 420), 2)

    # Generation 1, fitness 110
    # weights = [0.9962642065565064, -0.4703866185918031, 0.6162698204777457, 0.03568334379607241, 0.9206677798179066, 0.9572724998243685, 0.2933910031771858, 0.17615934331500904, -0.5126831364738331, -0.9773616809949335, 0.8132399336723157, 0.9599613158698095, 0.2982722520186194, 0.37035696866434, -0.4655614797649641, 0.3976269769692671, -0.7856015699792189, 0.4568787587939884, -0.980303307251875, 0.7443099229197327, 0.10909972761276032, 0.9449471412678299, -0.5423155922134197, 0.8186181381042077, -0.10024597492317833, -0.9673102239241869, -0.6050283867580084, -0.13036135771374724, 0.7456208847644783, 0.06850609304993238, -0.15148320394919845, 0.6381307912368199, -0.1879064966796815, 0.2890014029159833, -0.8765200673435931, 0.6561779294473127, 0.22135574667952862, 0.6798874823372467, 0.7191017480059054, -0.6595942111569864, 0.8097519228045431, -0.9116683023817433, -0.4439536554984216, 0.010919224773851433, -0.22378197186550186, -0.8818771553308147, 0.9438332534753662, 0.2056609753364378, 0.45256443619301034, 0.33717001681771097, 0.8259626081890687, -0.539001916791982, 0.20342103410871015, -0.20008996368839704, 0.32220267462086416, 0.31711220706307675, -0.8684822598086179, 0.014328301999877446, 0.05417038499041649, -0.7461446387830117, -0.9081861420051702, -0.38578634321292915, -0.9605847950587376, 0.03189452790512859, -0.31149349346252486, 0.3895308508185533, 0.8375783955887395, -0.020964399237313858, 0.892200533122127, 0.40304829285748034, -0.661187894262232, -0.719464643445759]
    # bias = [0.30789831425278336, -0.25322901355990735, -0.5839005757212616, -0.5576506824752132, 0.6503867179799023, -0.8243387995157654]

    # Generation 10, fitness 181
    # weights = [-0.4526641108500282, -0.47332071556421496, -0.34528375112322474, 0.31416544795335044, -0.27906754823539326, -0.7401426702943923, 0.1535217295499791, -0.5377033436762328, 0.7861661001562195, 0.3178076017924867, -0.669753947513712, 0.46536527996736554, -0.556356204904523, 0.7598640486988575, 0.5726175746672071, 0.24172196569082427, -0.6329315434166853, 0.8258544972595117, 0.3721715294955381, 0.9506751585280482, 0.7081659944996348, 0.516720815142675, 0.9665017022387388, -0.19365021972711455, 0.8565927669513407, 0.17079451291731584, 0.9454756521134613, -0.12161347161461777, -0.9958330448742807, -0.8430047888157928, -0.24949625501121986, 0.09367618576243353, -0.6021989512457131, -0.1998829494790202, -0.12738196763355897, -0.5554139061092327, -0.6347187599380137, -0.08127147259049372, 0.7205656070980984, -0.5674392287258323, 0.6580831201009563, 0.9926781158568188, -0.33048211189078747, 0.8751282255234494, -0.7122525551086896, 0.39299845439178105, 0.09440966546531704, 0.6842573010705777, -0.7131617003241899, 0.16558982192913319, 0.9116507494396247, -0.5076157412524507, -0.5166401162146639, 0.5434468402976751, -0.46476419158177246, 0.17974361507254377, 0.8696677675040481, 0.4908990965422672, 0.026438857783313674, -0.8872379231314318, -0.9110563970307555, -0.9901524182977033, -0.06370268260199774, -0.04041345141971053, -0.048269819424698435, 0.5418582651452095, -0.7898568253979907, 0.7282663725507277, -0.6109391830217926, -0.3560496114615468, 0.8202215954811642, 0.608512358326988]
    # bias = [-0.5008780997397613, 0.8459203691104749, -0.4267705639829469, 0.34903507529183675, 0.5249984465720983, 0.05634617569310851]

    # Generation 50, fitness 337
    weights = [-0.4526641108500282, -0.59376660290491, -0.22897727255343042, 0.15907643393669896, -0.563620326877043, -0.6448065787896289, 0.29134907832365853, -0.6465572768765455, 0.43473679185276265, 0.20006203222168056, -0.2959951845946458, 0.7128401038999511, -0.20123013770189868, 1.053965175541204, 0.6967919519001089, 0.3800749479551974, -0.8135435848978853, 0.8258544972595117, 0.44037873415657575, 0.8118198356081712, 0.6570473736671789, 0.8698908615472073, 0.9752461766289283, -0.1815969600483559, 0.6528145418523301, -0.027897852798167422, 1.1698143074618002, 0.0377322696765276, -1.067032606659442, -0.6132767872406818, -0.24949625501121986, 0.2589486577022638, -0.7470312954186936, -0.4304866150265762, -0.20036484395404774, -0.31567065780688464, -0.6182541228057326, -0.045639105112342815, 0.8874501222236206, -0.5674392287258323, 0.7227995697135505, -0.9438593116521097, -0.6542368879745664, -0.11969944888802092, -0.27202193760496196, -0.7686368429276242, 0.9438332534753662, 0.1976846246735114, 0.45256443619301034, 0.33717001681771097, 0.7188613362752083, -0.3612820479213968, 0.20342103410871015, -0.20008996368839704, 0.26659402082186734, 0.31711220706307675, -0.8205504785205007, 0.014328301999877446, 0.05417038499041649, -0.9415860636650206, -0.9241490400971359, -0.38578634321292915, -1.1501956147447197, 0.2501856083684581, -0.5650461821419859, 0.3895308508185533, 0.7007722469233547, 0.006934379314658845, 1.052231624287923, 0.4984309672344229, -0.661187894262232, -0.8314043810597274]
    bias = [-1.2038085359464712, 0.29946276833523133, -0.4099830979387937, -0.6918367790279529, 0.3849718603092236, 0.05634617569310851]

    # Simulate the robot on given map and given weights.
    simulate_auto(robot, obstacles_lst[map], weights, bias, visualize=True, steps=steps)

# Run for 200 timesteps.
simulate_robot_nn(200)
